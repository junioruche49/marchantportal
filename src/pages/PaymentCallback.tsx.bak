import React, { useState, useEffect, useCallback } from "react";
import { useLocation, withRouter } from "react-router";
import { useHistory } from "react-router-dom";
import useProfileStore from "../stores/profileStore";
import { useQuery, useMutation } from "react-query";
import useAuthStore from "../stores/authStore";
import { verifyPaymentReference, addCardToProfile } from "../clients/cards";

function useQueryParams() {
  return new URLSearchParams(useLocation().search);
}

const PaymentCallback = (props: any) => {
  const profile: any = useProfileStore((state) => state.data);

  const [addCardErrorResponse, setAddCardErrorResponse] = useState<any>();

  let query = useQueryParams();

  const history = useHistory();

  const token = useAuthStore((state) => state.accessToken);

  const [
    addCardMutation,
    { isLoading: isAddCardLoading, error: addCardError, data: addCardResponse },
  ] = useMutation(addCardToProfile);

  const [
    verifyRefMutation,
    {
      isLoading: isVerifyingTrx,
      error: verifyTrxError,
      data: verifyTrxResponse,
    },
  ] = useMutation(verifyPaymentReference);

  const verifyReference = useCallback(async () => {
    const response = await verifyRefMutation({
      token,
      reference: query.get(`trxref`),
    });

    return response;
  }, [token, query, verifyRefMutation]);

  useEffect(() => {
    if (!verifyTrxResponse) {
      verifyReference();
    }

    if (profile?.e_mail && verifyTrxResponse?.status) {
      if (verifyTrxResponse?.data.payment_type === 0) addCard();
      if (verifyTrxResponse?.data.payment_type === 2) {
        props.history.replace({
          pathname: "/pay/success",
          referrerData: {amount: verifyTrxResponse.data.amount, loan_id: verifyTrxResponse.data.item_id },
        });
      }
    }
  }, [verifyTrxResponse, profile]);

  const addCard = useCallback(async () => {
    try {
      const { message, data, success } = await addCardMutation({
        token,
        email: profile.e_mail,
        transaction_ref: query.get(`trxref`),
      });

      if (!success) {
        throw new Error(message);
      }

      props.history.replace("/cards", { message });
    } catch (err) {
      console.log(err);
      setAddCardErrorResponse(err.message);
    }
  }, [profile, token, query, addCardMutation, history]);

  if (isVerifyingTrx || isAddCardLoading || !profile.e_mail) {
    return (
      <>
        <div className="w-11/12 bg-white rounded py-12 shadow-lg m-auto px-8 relative mt-20">
          <img
            src="/img/loading-gif.gif"
            alt=""
            className="w-1/8 m-auto py-10"
          />
          <h6 className="m-auto text-lg text-gray-700 text-center">
            Please wait. We are verifying the transaction...
          </h6>
        </div>
      </>
    );
  }

  if (
    verifyTrxError ||
    addCardError ||
    (verifyTrxResponse && !verifyTrxResponse.status) ||
    (addCardResponse && !addCardResponse.status)
  ) {
    return (
      <>
        <main className="md:pl-12">
          <div className="flex ">
            <div className="w-full ">
              <br />
              <div className="relative w-11/12 bg-white rounded py-12 shadow-lg border-b-4 border-blue-700 md:border-none mb-20 m-auto md:m-0 mt-12 md:mt-0">
                <div className="w-full m-auto mb-6">
                  <img
                    src="/img/error-icon.svg"
                    alt=""
                    className="w-2/4 md:w-1/4 m-auto"
                  />
                </div>
                <div className="w-3/4 md:w-2/4 m-auto">
                  <p className="text-gray-700 font-medium text-center">
                    <span className="text-red-600">
                      Oops! An error has occured.
                    </span>{" "}
                    <br />
                    {verifyTrxError
                      ? verifyTrxError.response.status +
                        " - " +
                        verifyTrxError.response.data.message
                      : ""}
                    {verifyTrxResponse && verifyTrxResponse.status === false
                      ? verifyTrxResponse.message
                      : ""}
                    {addCardError
                      ? addCardError.response.status +
                        " - " +
                        addCardError.response.data.message +
                        " " +
                        addCardErrorResponse
                      : ""}
                    {addCardResponse && addCardResponse.status === false
                      ? +" - " + addCardResponse.message
                      : ""}
                    {addCardErrorResponse ? addCardErrorResponse : null}
                  </p>
                </div>
                <div className="w-full m-auto mt-10">
                  <button
                    onClick={() => props.history.replace("/")}
                    className="flex w-2/4 md:w-1/4 shadow-xl text-xl font-light text-white justify-center py-4 md:py-3 items-center bg-gray-800 hover:bg-gray-700 rounded-md m-auto transition-colors duration-150 ease-in-out"
                  >
                    <svg
                      className="mr-2 -mt-1"
                      width="18"
                      height="18"
                      viewBox="0 0 18 18"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <g id="chevron_left_24px">
                        <path
                          id="icon/navigation/chevron_left_24px"
                          d="M15.705 16.59L11.125 12L15.705 7.41L14.295 6L8.29498 12L14.295 18L15.705 16.59Z"
                          fill="white"
                        />
                      </g>
                    </svg>
                    <span className="text-sm xl:text-lg lg:text-sm pr-2">
                      Back to home
                    </span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </main>
      </>
    );
  }

  return (
    <>
      <main className="md:pl-12">
        <div className="flex ">
          <div className="w-full ">
            <br />
            <div className="relative w-11/12 bg-white rounded py-12 shadow-lg border-b-4 border-blue-700 md:border-none mb-20 m-auto md:m-0 mt-12 md:mt-0">
              <div className="w-full m-auto mb-6">
                <img
                  src="/img/error-icon.svg"
                  alt=""
                  className="w-2/4 md:w-1/4 m-auto"
                />
              </div>
              <div className="w-3/4 md:w-2/4 m-auto">
                <p className="text-gray-700 font-medium text-center">
                  <span className="text-red-600">
                    Fatal exception. Please reach out to the administrator
                    immediately!
                  </span>
                </p>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default withRouter(PaymentCallback);
